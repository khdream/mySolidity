/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorldPurposeInterface extends ethers.utils.Interface {
  functions: {
    "getBalance()": FunctionFragment;
    "getCurrentPurpose()": FunctionFragment;
    "setPurpose(string)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPurpose",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPurpose", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPurpose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "PurposeChange(address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PurposeChange"): EventFragment;
}

export class WorldPurpose extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorldPurposeInterface;

  functions: {
    getBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getCurrentPurpose(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber] & {
          owner: string;
          purpose: string;
          investment: BigNumber;
        }
      ] & {
        currentPurpose: [string, string, BigNumber] & {
          owner: string;
          purpose: string;
          investment: BigNumber;
        };
      }
    >;

    setPurpose(
      _purpose: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPurpose(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      purpose: string;
      investment: BigNumber;
    }
  >;

  setPurpose(
    _purpose: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPurpose(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        purpose: string;
        investment: BigNumber;
      }
    >;

    setPurpose(
      _purpose: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        purpose: string;
        investment: BigNumber;
      }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    PurposeChange(
      owner?: string | null,
      purpose?: null,
      investment?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; purpose: string; investment: BigNumber }
    >;
  };

  estimateGas: {
    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPurpose(overrides?: CallOverrides): Promise<BigNumber>;

    setPurpose(
      _purpose: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPurpose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPurpose(
      _purpose: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
